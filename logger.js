// Generated by CoffeeScript 1.4.0
var Logger, defaultConfig, logLevel, _,
  __slice = [].slice;

_ = require('underscore');

defaultConfig = {
  showMillis: false,
  showTimestamp: true,
  showLogLevelName: true,
  printObjFunc: require('util').inspect,
  prefix: ""
};

logLevel = 5;

module.exports = Logger = (function() {
  var _this = this;

  Logger.levels = {
    none: {
      level: 0,
      name: 'none'
    },
    error: {
      method: 'error',
      level: 1,
      name: 'error'
    },
    err: {
      method: 'error',
      level: 1,
      name: 'error'
    },
    warn: {
      method: 'warn',
      level: 2,
      name: 'warn'
    },
    warning: {
      method: 'warn',
      level: 2,
      name: 'warn'
    },
    info: {
      method: 'info',
      level: 3,
      name: 'info'
    },
    log: {
      method: 'log',
      level: 4,
      name: 'log'
    },
    debug: {
      method: 'log',
      level: 5,
      name: 'debug'
    },
    trace: {
      method: 'trace',
      level: 6,
      name: 'trace'
    }
  };

  Logger.setLevel = function(level, silent) {
    var levelName, levelValue, log, name, val, _ref;
    if (silent == null) {
      silent = false;
    }
    levelName = null;
    levelValue = null;
    _ref = Logger.levels;
    for (name in _ref) {
      val = _ref[name];
      if (level === val.level || level === val.name || level === name) {
        levelName = val.name;
        levelValue = val.level;
        break;
      }
    }
    log = new this({
      prefix: 'basic-logger'
    });
    if ((levelName != null) && (levelValue != null)) {
      if (!silent) {
        log.info("Setting log level to '" + levelName + "'");
      }
      return logLevel = levelValue;
    } else {
      return log.warn("Can't set log level to '" + level + "'. This level does not exist.");
    }
  };

  Logger.logger = function(config) {
    return new this(config);
  };

  function Logger(config) {
    if (config == null) {
      config = {};
    }
    if (_.isString(config)) {
      config = {
        prefix: config
      };
    }
    this.config = _.defaults(config, defaultConfig);
  }

  Logger.prototype.padZeros = function(num, digits) {
    var zerosToAdd;
    num = String(num);
    zerosToAdd = digits - num.length;
    while (zerosToAdd > 0) {
      num = '0' + num;
      zerosToAdd = zerosToAdd - 1;
    }
    return num;
  };

  Logger.prototype._log = function() {
    var args, date, level, levelName, methodName, msg, output, timestamp;
    level = arguments[0], levelName = arguments[1], methodName = arguments[2], msg = arguments[3], args = 5 <= arguments.length ? __slice.call(arguments, 4) : [];
    if (level <= logLevel) {
      if (typeof msg === "object") {
        msg = this.config.printObjFunc(msg);
      }
      output = '';
      if (this.config.showTimestamp) {
        date = new Date;
        timestamp = "" + (date.getFullYear()) + "-" + (this.padZeros(date.getMonth() + 1, 2)) + "-" + (this.padZeros(date.getDate(), 2)) + " " + (this.padZeros(date.getHours(), 2)) + ":" + (this.padZeros(date.getMinutes(), 2)) + ":" + (this.padZeros(date.getSeconds(), 2));
        if (this.config.showMillis) {
          timestamp += "." + (this.padZeros(date.getMilliseconds(), 3));
        }
        output += "[" + timestamp + "]";
      }
      if (this.config.prefix !== "") {
        output += " " + this.config.prefix;
      }
      output += this.config.showLogLevelName ? " (" + levelName + ") " : " ";
      output += msg;
      args.unshift(output);
      return console[methodName].apply(this, args);
    } else {
      return -1;
    }
  };

  _.each(Logger.levels, function(item, propName) {
    if (item.method != null) {
      return Logger.prototype[propName] = function() {
        var args, msg;
        msg = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        args.unshift(item.level, item.name, item.method, msg);
        return this._log.apply(this, args);
      };
    }
  });

  return Logger;

}).call(this);
